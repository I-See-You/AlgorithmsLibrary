//http://codeforces.com/gym/101845/submission/41539236


#include <stdio.h>
#include <bits/stdtr1c++.h>

#define MAXN 101
#define MOD 1000000007
#define MOD_THRESHOLD 18

#define clr(ar) memset(ar, 0, sizeof(ar))
#define read() freopen("lol.txt", "r", stdin)
#define dbg(x) cout << #x << " = " << x << endl
#define ran(a, b) ((((rand() << 15) ^ rand()) % ((b) - (a) + 1)) + (a))

using namespace std;

struct Matrix{
    int n, ar[MAXN][MAXN];

    Matrix(){}
    Matrix(int dimension, int diagonal = 0){
        clr(ar);
        n = dimension;
        for (int i = 0; i < n; i++) ar[i][i] = diagonal;
    }

    Matrix operator* (const Matrix& other) const{
        Matrix res(n);
        int i, j, k, l, d;

        for(i = 0; i < n; i++){
            for(j = 0; j < other.n; j++){
                unsigned long long x = 0;
                for(k = 0; k < n; k += MOD_THRESHOLD){
                    for (l = 0; l < MOD_THRESHOLD && (k + l) < n; l++){
                        x += ((unsigned long long)ar[i][k + l] * other.ar[k + l][j]);
                    }
                    x %= MOD;
                }
                res.ar[i][j] = x;
            }
        }
        return res;
    }

    Matrix operator^ (long long n) const{
        Matrix x = *this, res = Matrix(this->n, 1);
        while (n){
            if (n & 1) res = res * x;
            n = n >> 1;
            x = x * x;
        }
        return res;
    }
};

long long solve(vector <int>& seq, long long n){
    int len = seq.size();
    if (n < len) return seq[n];

    int l = 45;
    vector <int> dp = {0, 0, 0, 0, 0, 1000000006, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1000000003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 999999998, 0, 0, 0, 0, 0, 0, 0, 0, 0, 999999991, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 697683758};

    struct Matrix mat = Matrix(l);
    for (int i = 1; i < mat.n; i++) mat.ar[i][i - 1] = 1;
    for (int i = 0; i < mat.n; i++) mat.ar[0][i] = MOD - dp[l - i - 1];

    long long res = 0;
    mat = mat ^ (n - len + 1);
    for (int i = 0; i < mat.n; i++) res = (res + (long long)mat.ar[0][i] * seq[len - i - 1]) % MOD;
    return res;
}


int main(){
    long long n;
    vector <int> seq = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 4670, 4670, 4670, 4670, 4670, 4670, 4670, 4670, 4670, 4670, 77328, 77328, 77328, 77328, 77328, 77327, 77327, 77327, 77327, 77327, 1280423, 1280423, 1280423, 1280423, 1280423, 1280407, 1280407, 1280407, 1280407, 1280407, 21201682, 21201682, 21201682, 21201682, 21201682, 21201417, 21201417, 21201417, 21201417, 21201417, 351064701, 351064701, 351064701, 351064701, 351064701, 351060313, 351060313, 351060313, 351060313, 351060313, 813049339, 813049339, 813049339, 813049339, 813049339, 812976681, 812976681, 812976681, 812976681, 812976681, 254458772, 254458772, 254458772, 254458772, 254458772, 253255676, 253255676, 253255676, 253255676, 253255676, 814244805, 814244805, 814244805, 814244805, 814244805, 794323530, 794323530, 794323530, 794323530, 794323530, 921307759, 921307759, 921307759, 921307759, 921307759, 591444475, 591444475, 591444475, 591444475, 591444475, 900011655, 900011655, 900011655, 900011655, 900011655, 438022629, 438022629, 438022629, 438022629, 438022629, 203394121, 203394121, 203394121, 203394121, 203394121, 761912030, 761912030, 761912030, 761912030, 761912030, 853886567, 853886567, 853886567, 853886567, 853886567, 292897438, 292897438, 292897438, 292897438, 292897438, 14086400, 14086400, 14086400, 14086400, 14086400, 887102178, 887102178, 887102178, 887102178, 887102178, 623949579, 623949579, 623949579, 623949579, 623949579, 315382399, 315382399, 315382399, 315382399, 315382399, 728911162, 728911162, 728911162, 728911162, 728911162, 963539670, 963539670, 963539670, 963539670, 963539670, 188356844, 188356844, 188356844, 188356844, 188356844, 96382307, 96382307, 96382307, 96382307, 96382307, 83794594, 83794594, 83794594, 83794594, 83794594, 362605632, 362605632, 362605632, 362605632, 362605632};

    while (cin >> n){
        cout << solve(seq, n) << endl;
    }
    return 0;
}
